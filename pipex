#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <fcntl.h>

#define RED_TEXT "\x1b[31m"
#define GREEN_TEXT "\x1b[32m"
#define RESET_TEXT "\x1b[0m"

void ft_error_arguments(int ac)
{
    if (ac == 1 || ac > 5)
    {
        perror(RED_TEXT"Usage: ./pipex file1 cmd1 cmd2 file2\n"RESET_TEXT);
        exit(EXIT_FAILURE);
    }
}

void execute_comandes(int child_p, char **files_commandes, int pipe_fd[])
{

    if (child_p == 0) {
        close(pipe_fd[0]);
        dup2(pipe_fd[1], STDOUT_FILENO);
        close(pipe_fd[1]);
        char *cmd1_args[] = { "/bin/sh", "-c", files_commandes[2], NULL };
        execve("/bin/sh", cmd1_args, NULL);
        perror("execl");
        exit(EXIT_FAILURE);
    } else {
        close(pipe_fd[1]);
        dup2(pipe_fd[0], STDIN_FILENO);
        close(pipe_fd[0]);
        int file2_fd = open(files_commandes[4], O_RDWR);
        if (file2_fd == -1) {
            perror("open");
            exit(EXIT_FAILURE);
        }
        dup2(file2_fd, STDOUT_FILENO);
        char *cmd2_args[] = { "/bin/sh", "-c", files_commandes[3], NULL };
        execve("/bin/sh", cmd2_args, NULL);
        perror("execl");
        exit(EXIT_FAILURE);
    }
}

int main(int argc, char **argv, char **ev)
{
    int pipe_fd[2];
    pid_t child_pid;
    
    ft_error_arguments(argc);
    if (pipe(pipe_fd) == -1)
    {
        perror("pipe");
        exit(EXIT_FAILURE);
    }
     child_pid = fork();

    if (child_pid == -1)
    {
        perror("fork");
        exit(EXIT_FAILURE);
    }
    execute_comandes(child_pid, argv, pipe_fd);
    return 0;
}
